jsonRespText<-content(r,as="text")
library(httr)
library(jsonlite)
r <- GET("https://airapi.airly.eu/v2/installations/nearest?lat=50.0617022&lng=19.9373569&maxDistanceKM=15&maxResults=-1",
add_headers(apikey = "TmbwO0DqGbLvxkgVqImR7GZKFY9h3c4x", Accept = "application/json")
)
jsonRespText<-content(r,as="text")
test15<-fromJSON(jsonRespText)
longitude<-test15$location$longitude
latitude<-test15$location$latitude
data15<-data.frame(longitude,latitude)
data15$elevation<-test15$elevation
head(data15)
library(sf)
dzielnice<-st_read("dzielnice_Krakowa/dzielnice_Krakowa.shp") #układ odniesienia(CRS) to ETRS89 (Poland CS92)
dzielniceWGS84<-st_transform(dzielnice,crs = 4326) # "4326" to kod dla WGS84
krakowWGS84<-st_union(dzielniceWGS84)
plot(krakowWGS84)
points(data15, pch=1)
library(spatstat)
library(sp)
krakowUTM<-st_transform(krakowWGS84,CRS("+proj=utm +zone=34 +datum=WGS84")) #przejście ze sfery (lat lon) na płaską mapę w ukladzie UTM (małopolska jest w 34)
data_spat<-data.frame(lon=data15$longitude,lat=data15$latitude,elev=data15$elevation)
data_spat
coordinates(data_spat) <- ~lon+lat #koordynaty
proj4string(data_spat) <- CRS("+proj=longlat +datum=WGS84")#układ
data_spat
data_UTM <- spTransform(data_spat, CRS("+proj=utm +zone=34 +datum=WGS84"))
XY<-coordinates(data_UTM)
data15_ppp<-ppp(x=XY[,1],y=XY[,2],window=as.owin(krakowUTM))
plot(data15_ppp)
data15_ppp_e<-ppp(x=XY[,1],y=XY[,2],marks=data_UTM$elev,window=as.owin(krakowUTM))
plot (data15_ppp_e)
qt <- quadrat.test(data15_ppp)
plot(qt)
qt
nn<-nndist(data15_ppp)
hist(nn)
ed<-density(data15_ppp)
plot(ed)
points(data15_ppp,pch="*",col="White")
library(maptools)
library(automap)
library(raster)
install.packages("https://cran.r-project.org/src/contrib/Archive/maptools/maptools_1.1-8.tar.gz", repo=NULL, type="source")
data15_spdf<-as.SpatialPointsDataFrame.ppp(data15_ppp_e)
#######prosta mapa dla analizowanej cechy (tu: wysokości)#######
#install.packages("https://cran.r-project.org/src/contrib/Archive/maptools/maptools_1.1-8.tar.gz", repo=NULL, type="source")
library(maptools)
spplot(data15_spdf)
coordinates(data15_spdf)
elev_auto <- autoKrige(marks ~ 1, input_data = data15_spdf)
plot(elev_auto)
plot(elev_auto$krige_output[1])
points(data15_ppp_e,pch="*",col="White")
plot(Window(data15_ppp_e),add=TRUE)
bound<-st_as_sf(krakowUTM)
plot(bound)
coord<-as.data.frame(st_coordinates(krakowUTM)) #można też wyciągnąć je z bound
head(coord) # X i Y to są koordynaty punktów tworzących poligon, L1 i L2 - oznaczenia poligonów róźnych poziomów
summary(coord) #jest więcej poligonów niż 1 (L1 od 1 do 3), jest więc błąd w .shp
left_down<-c( min(coord$X), min(coord$Y))
left_down
right_up<-c( max(coord$X), max(coord$Y))
right_up
size<-c(100,100)
points<- (right_up-left_down)/size #wyliczenie liczby punktów (oczek)
num_points<-ceiling(points) #zaokrąglenie w górę
num_points
grid <- GridTopology(left_down, size,num_points)
grid
gridpoints <- SpatialPoints(grid, proj4string = CRS("+proj=utm +zone=34 +datum=WGS84")) #elipsoida odniesienia WGS84
plot(gridpoints) #trochę to może potrwać
spgrid <- SpatialPixels(gridpoints)
head(spgrid)
plot(spgrid)
plot(bound,add=TRUE)
elev_auto <- autoKrige(marks ~ 1, input_data = data15_spdf,new_data=spgrid,model = "Mat")
plot(elev_auto$krige_output[1])
points(data15_ppp_e,pch="*",col="White")
plot(bound,add=TRUE,border="White")
plot(elev_auto$krige_output[3])
points(data15_ppp_e,pch="*",col="White")
plot(bound,add=TRUE,border="White")
library(tmaptools)
install.packages("tmaptools")
library(tmaptools)
g<-st_as_sf(gridpoints)#konwersja do formatu na którym działa crop_shape
cg<-crop_shape(g,bound,polygon = TRUE) #argument polygon potrzebny aby wyciąć poligonem (a nie w kwadrat)
spgrid <- SpatialPixels(as_Spatial(cg))#konwersja z powrotem do st i następnie do SpatialPixels
dev.off()
plot(spgrid)
data15_ppp_e$marks #sprawdzamy czy czegoś nie przepisaliśmy
elev_auto <- autoKrige(marks ~ 1, input_data = data15_spdf,new_data=spgrid) #nowa siatka
plot(elev_auto$krige_output[1])
points(data15_ppp_e,pch="*",col="White")
plot(elev_auto$krige_output[3])
points(data15_ppp_e,pch="*",col="White")
a<-elev_auto$krige_output$var1.pred
b<-rep("NA",length(a)) #tworzymy pusty wektor o długości a
b<-ifelse(a<=200,1,b)
b<-ifelse(a>200 & a<=260,2,b)
b<-ifelse(a>260,3,b)
elev_auto$krige_output$var1.factor<-as.factor(b)#tworzymy nowy element
plot(elev_auto$krige_output[4])
