library(httr)
library(jsonlite)
r <- GET("https://airapi.airly.eu/v2/installations/nearest?lat=50.0617022&lng=19.9373569&maxDistanceKM=15&maxResults=-1",
add_headers(apikey = "t81KwXzV1EJ8XjNIYvyRHnZuXESyYIdJ", Accept = "application/json")
)
jsonRespText<-content(r,as="text")
test15<-fromJSON(jsonRespText)
longitude<-test15$location$longitude
data15<-data.frame(longitude,latitude)
latitude<-test15$location$latitude
data15<-data.frame(longitude,latitude)
data15$elevation<-test15$elev #wysokość nie bedzie potrzebna, ale niech będzie
data15$id<-test15$id
head(data15)
library(sp)
library(spatstat)
data_spat<-data.frame(lon=data15$longitude,lat=data15$latitude,elev=data15$elev,id=data15$id)
coordinates(data_spat) <- ~lon+lat #określamy, które elementy to koordynaty (potrzebne do ppp)
proj4string(data_spat) <- CRS("+proj=longlat +datum=WGS84") #określamy, jaki mamy układ
data_spat # mamy już obiekt w układzie sferycznym, który można automatycznie konwertować
data_UTM <- spTransform(data_spat, CRS("+proj=utm +zone=34 +datum=WGS84"))
library(sf)
dzielnice<-st_read("dzielnice_Krakowa.shp") #układ odniesienia(CRS) to ETRS89 (Poland CS92)
dzielnice<-st_read("dzielnice_Krakowa.shp") #układ odniesienia(CRS) to ETRS89 (Poland CS92)
dzielnice<-st_read("dzielnice_Krakowa.shp") #układ odniesienia(CRS) to ETRS89 (Poland CS92)
setwd("C:/Metody_badania_klimatu_i_środowiska/Ex_9_Czujniki_na_mapie")
dzielnice<-st_read("dzielnice_Krakowa.shp") #układ odniesienia(CRS) to ETRS89 (Poland CS92)
library(sf)
dzielnice<-st_read("dzielnice_Krakowa.shp") #układ odniesienia(CRS) to ETRS89 (Poland CS92)
dzielnice<-st_read("dzielnice_Krakowa/dzielnice_Krakowa.shp") #układ odniesienia(CRS) to ETRS89 (Poland CS92)
library(httr)
library(jsonlite)
r <- GET("https://airapi.airly.eu/v2/installations/nearest?lat=50.0617022&lng=19.9373569&maxDistanceKM=15&maxResults=-1",
add_headers(apikey = "t81KwXzV1EJ8XjNIYvyRHnZuXESyYIdJ", Accept = "application/json")
)
jsonRespText<-content(r,as="text")
test15<-fromJSON(jsonRespText)
longitude<-test15$location$longitude
latitude<-test15$location$latitude
data15<-data.frame(longitude,latitude)
data15$elevation<-test15$elev #wysokość nie bedzie potrzebna, ale niech będzie
data15$id<-test15$id
head(data15)
library(sp)
library(spatstat)
data_spat<-data.frame(lon=data15$longitude,lat=data15$latitude,elev=data15$elev,id=data15$id)
coordinates(data_spat) <- ~lon+lat #określamy, które elementy to koordynaty (potrzebne do ppp)
proj4string(data_spat) <- CRS("+proj=longlat +datum=WGS84") #określamy, jaki mamy układ
data_spat # mamy już obiekt w układzie sferycznym, który można automatycznie konwertować
data_UTM <- spTransform(data_spat, CRS("+proj=utm +zone=34 +datum=WGS84"))
dzielniceWGS84<-st_transform(dzielnice,crs = 4326) # "4326" to kod dla WGS84
krakowWGS84<-st_union(dzielniceWGS84)
krakowUTM<-st_transform(krakowWGS84,CRS("+proj=utm +zone=34 +datum=WGS84"))
XY<-coordinates(data_UTM)
data15_ppp_id<-ppp(x=XY[,1],y=XY[,2],marks=data.frame(elev=data_UTM$elev,id=data_UTM$id),window=as.owin(krakowUTM))
data15_ppp_id$marks$id #mamy od razu tylko te id które są w Krakowie
n_id<-length(data15_ppp_id$marks$id)
n_id
list_inst2 <- vector(mode = "list", length = n_id) #funkcja do stworzenia struktury danych
for (i in seq(1,n_id)) {
print(i) #to tylko pomocniczo, żeby wiedzieć, który obrót pętli
#tworzymy ciąg znaków określajacy adres, pod kótrym znajdują się pomiary z czujnika
str<-paste("https://airapi.airly.eu/v2/measurements/installation?installationId=",id[i],sep="")
#pobieramy dane z adresu
r <- GET(url=str,add_headers(apikey = "t81KwXzV1EJ8XjNIYvyRHnZuXESyYIdJ", Accept = "application/json"))
#przechodzimy z formatu r na json i z json na tekst
jsonRespText<-content(r,as="text")
inst<-fromJSON(jsonRespText)
list_inst2[[i]]<-inst #tutaj będą wszystkie odczyty
}
id<-data15_ppp_id$marks$id
id
list_inst2 <- vector(mode = "list", length = n_id) #funkcja do stworzenia struktury danych
for (i in seq(1,n_id)) {
print(i) #to tylko pomocniczo, żeby wiedzieć, który obrót pętli
#tworzymy ciąg znaków określajacy adres, pod kótrym znajdują się pomiary z czujnika
str<-paste("https://airapi.airly.eu/v2/measurements/installation?installationId=",id[i],sep="")
#pobieramy dane z adresu
r <- GET(url=str,add_headers(apikey = "t81KwXzV1EJ8XjNIYvyRHnZuXESyYIdJ", Accept = "application/json"))
#przechodzimy z formatu r na json i z json na tekst
jsonRespText<-content(r,as="text")
inst<-fromJSON(jsonRespText)
list_inst2[[i]]<-inst #tutaj będą wszystkie odczyty
}
list_inst2[[1]] #koszmarna sturktura danych :( ale nas interesuje tylko pole "current" dla PM2.5
list_inst2[[1]]$current$values
list_inst2[[6]]$current$values
current<-rep(NA,n_id)
for (i in seq(1,n_id)) {
print(i)
logic<-list_inst2[[i]]$current$values$name=="PM25" #zmienna logiczna do wyszukania pól o nazwie "PM25"
if (sum(logic)==1) #testujemy, czy istnieje jedno i tylko jedno takie pole (zdarzają się błędne odczyty - tych nie chcemy zapisać)
current[i]<-list_inst2[[i]]$current$values[logic,2]
}
logic<-list_inst2[[i]]$current$values$name=="PM25"
logic
list_inst2[[i]]$current$values
list_inst2[[i]]$current$values[logic,]
list_inst2[[i]]$current$values[logic,2]
current
library(maptools)
data15_spdf<-as.SpatialPointsDataFrame.ppp(data15_ppp_id)
coordinates(data15_spdf)
data15_spdf$current<-current
dev.off() #bo RStudio może wariować ;)
plot(data15_spdf)
current
miss <- is.na(data15_spdf$current)
library(automap)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,])
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_id),add=TRUE)
plot(pm25_auto)
pm25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,], model="Gau")
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(Window(data15_ppp_id),add=TRUE)
plot(pm25_auto)
plot(Window(data15_ppp_id),add=TRUE)
plot(pm25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
bound<-st_as_sf(krakowUTM)
plot(bound)
coord<-as.data.frame(st_coordinates(krakowUTM))
left_down<-c( min(coord$X), min(coord$Y))
right_up<-c( max(coord$X), max(coord$Y))
size<-c(100,100)
points<- (right_up-left_down)/size
num_points<-ceiling(points) #zaokrąglenie w górę
grid <- GridTopology(left_down, size,num_points)
gridpoints <- SpatialPoints(grid, proj4string = CRS("+proj=utm +zone=34 +datum=WGS84"))
plot(gridpoints) #czekamy cierpliwie
library(tmaptools)
g<-st_as_sf(gridpoints)#konwersja do formatu na którym działa crop_shape
cg<-crop_shape(g,bound,polygon = TRUE)
spgrid <- SpatialPixels(as_Spatial(cg))#konwersja z powrotem do st i następnie do SpatialPixels
plot(spgrid)
PM25_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,],new_data=spgrid)
plot(PM25_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(PM25_auto)
elev_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,],new_data=spgrid, model="Gau")
plot(elev_auto$krige_output[1],main="PM 2.5")
points(data15_ppp_id[!miss,],pch="*",col="White")
plot(PM25_auto)
elev_auto <- autoKrige(current ~ 1, input_data = data15_spdf[!miss,],new_data=spgrid, model="Gau")
plot(PM25_auto$krige_output[1],main="PM 2.5")
